name: app deployment

on:
    push:
      branches: [ main ]

jobs:
    deploy:
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        matrix:
          python-version: [3.8]
      
      env:
        #Creacion de variables usadas para las credenciales de rds
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        #Creacion de variables necesarias para usar terraform, cdk y boto3 en mi cuenta de aws
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@v2
      - name: Initialize Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: ${{matrix.python-version}}
      - name: Install dependencies 
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
        #Se crea un artefacto (imagen de docker) a partir de la app de flask
        #Tambien se hace push de esa imagen a mi repo de dockerhub, para eso es que se necesitan las creds
      - name: push to Dockerhub
        uses: docker/build-push-action/@v1
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
          repository: ${{secrets.DOCKERHUB__REPO}}
          tag_with_ref: true
          labels: latest

              ####DESPLIEGUE DE INFRA###
              ###SE USA LA CARPETA iac###

        #Se inicializa terraform
      - name: terraform init
        working-directory: ./iac
        run: |
          terraform init

        #Se validan y da formato a los archivos .tf
      - name: terraform validation
        working-directory: ./iac
        run: |
          terraform fmt
          terraform validate
        #Creacion del plan de terraform
      - name: Plan Creation
        working-directory: ./iac
        run: |
          terraform plan -var db_user=${{ secrets.DB_USERNAME }} -var db_password=${{ secrets.DB_PASSWORD }} -input=false

        #Se despliegan los recursos de aws
      - name: terraform apply
        working-directory: ./iac
        run: |
          terraform apply -var db_user=${{ secrets.DB_USERNAME }} -var db_password=${{ secrets.DB_PASSWORD }} -auto-approve 

        ###FIN DESPLIEGUE DE ARQUITECTURA###

        #Ya se tiene el cluster de EKS listo, solo falta el deplyment con la app de flask
        #Se configura kubctl para interactuar con el cluster de EKS
        #Se despliega la app y se inyectan algunas de las variables necesarias para la conexion con db
      - name: deploy pods
        working-directory: ./k8s
        run: |
          pip install boto3
          python policyScript.py
          aws eks --region us-east-1 update-kubeconfig --name flask-cluster
          kubectl apply -f .
          kubectl set env deployment/flask-app DB_PASSWORD=${{ secrets.DB_PASSWORD }} DB_USERNAME=${{ secrets.DB_USERNAME }}

        #Se ejecuta el dbScript, el cual configura las demas variables necesarias para la conexion con db
        #Ademas crea una tabla con datos de prueba en la db
      - name: creacion de variables de entorno para DB e inicializacion la base de datos
        working-directory: ./scripts
        run: |
          pip install boto3
          python dbScript.py

        #Se ejecuta el script createRecord.py, el cual se encarga de crear un record con el endpoint del alb
      - name: create r53 record
        working-directory: ./scripts
        run: |
          pip install boto3
          python createRecord.py

        #Se crea monitoreo del cluster, usando fluent bit para enviar los datos a CW
        #Los datos quedaran visibles en Container Insights
      - name: creacion de monitoreo
        working-directory: ./monitoring
        run: |
          aws eks --region us-east-1 update-kubeconfig --name flask-cluster
          aws eks update-cluster-config \
          --region us-east-1 \
          --name flask-cluster \
          --logging '{"clusterLogging":[{"types":["api","audit","authenticator","controllerManager","scheduler"],"enabled":true}]}'
          ClusterName=flask-cluster
          RegionName=us-east-1
          FluentBitHttpPort='2020'
          FluentBitReadFromHead='Off'
          [[ ${FluentBitReadFromHead} = 'On' ]] && FluentBitReadFromTail='Off'|| FluentBitReadFromTail='On'
          [[ -z ${FluentBitHttpPort} ]] && FluentBitHttpServer='Off' || FluentBitHttpServer='On'
          curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluent-bit-quickstart.yaml | sed 's/{{cluster_name}}/'${ClusterName}'/;s/{{region_name}}/'${RegionName}'/;s/{{http_server_toggle}}/"'${FluentBitHttpServer}'"/;s/{{http_server_port}}/"'${FluentBitHttpPort}'"/;s/{{read_from_head}}/"'${FluentBitReadFromHead}'"/;s/{{read_from_tail}}/"'${FluentBitReadFromTail}'"/' | kubectl apply -f - 
          kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/cloudwatch-namespace.yaml
          kubectl apply -f cwagent-configmap.yaml    





